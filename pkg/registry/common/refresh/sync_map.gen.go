// Code generated by "go-syncmap -output sync_map.gen.go -type cancelersMap<string,context.CancelFunc>"; DO NOT EDIT.

package refresh

import (
	"context"
	"sync"
)

func _() {
	// An "cannot convert cancelersMap literal (type cancelersMap) to type sync.Map" compiler error signifies that the base type have changed.
	// Re-run the go-syncmap command to generate them again.
	_ = (sync.Map)(cancelersMap{})
}

var _nil_cancelersMap_context_CancelFunc_value = func() (val context.CancelFunc) { return }()

func (m *cancelersMap) Store(key string, value context.CancelFunc) {
	(*sync.Map)(m).Store(key, value)
}

func (m *cancelersMap) LoadOrStore(key string, value context.CancelFunc) (context.CancelFunc, bool) {
	actual, loaded := (*sync.Map)(m).LoadOrStore(key, value)
	if actual == nil {
		return _nil_cancelersMap_context_CancelFunc_value, loaded
	}
	return actual.(context.CancelFunc), loaded
}

func (m *cancelersMap) Load(key string) (context.CancelFunc, bool) {
	value, ok := (*sync.Map)(m).Load(key)
	if value == nil {
		return _nil_cancelersMap_context_CancelFunc_value, ok
	}
	return value.(context.CancelFunc), ok
}

func (m *cancelersMap) Delete(key string) {
	(*sync.Map)(m).Delete(key)
}

func (m *cancelersMap) Range(f func(key string, value context.CancelFunc) bool) {
	(*sync.Map)(m).Range(func(key, value interface{}) bool {
		return f(key.(string), value.(context.CancelFunc))
	})
}
