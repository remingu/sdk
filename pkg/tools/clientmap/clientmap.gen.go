// Code generated by "go-syncmap -output clientmap.gen.go -type Map<string,github.com/networkservicemesh/api/pkg/api/networkservice.NetworkServiceClient>"; DO NOT EDIT.

package clientmap

import (
	"sync"

	"github.com/networkservicemesh/api/pkg/api/networkservice"
)

func _() {
	// An "cannot convert Map literal (type Map) to type sync.Map" compiler error signifies that the base type have changed.
	// Re-run the go-syncmap command to generate them again.
	_ = (sync.Map)(Map{})
}

var _nil_Map_networkservice_NetworkServiceClient_value = func() (val networkservice.NetworkServiceClient) { return }()

func (m *Map) Store(key string, value networkservice.NetworkServiceClient) {
	(*sync.Map)(m).Store(key, value)
}

func (m *Map) LoadOrStore(key string, value networkservice.NetworkServiceClient) (networkservice.NetworkServiceClient, bool) {
	actual, loaded := (*sync.Map)(m).LoadOrStore(key, value)
	if actual == nil {
		return _nil_Map_networkservice_NetworkServiceClient_value, loaded
	}
	return actual.(networkservice.NetworkServiceClient), loaded
}

func (m *Map) Load(key string) (networkservice.NetworkServiceClient, bool) {
	value, ok := (*sync.Map)(m).Load(key)
	if value == nil {
		return _nil_Map_networkservice_NetworkServiceClient_value, ok
	}
	return value.(networkservice.NetworkServiceClient), ok
}

func (m *Map) Delete(key string) {
	(*sync.Map)(m).Delete(key)
}

func (m *Map) Range(f func(key string, value networkservice.NetworkServiceClient) bool) {
	(*sync.Map)(m).Range(func(key, value interface{}) bool {
		return f(key.(string), value.(networkservice.NetworkServiceClient))
	})
}
