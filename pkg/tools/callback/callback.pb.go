// Copyright (c) 2020 Doc.ai and/or its affiliates.
//
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.8.0
// source: callback.proto

package callback

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DataKind int32

const (
	DataKind_Data  DataKind = 0
	DataKind_Close DataKind = 1
)

// Enum value maps for DataKind.
var (
	DataKind_name = map[int32]string{
		0: "Data",
		1: "Close",
	}
	DataKind_value = map[string]int32{
		"Data":  0,
		"Close": 1,
	}
)

func (x DataKind) Enum() *DataKind {
	p := new(DataKind)
	*p = x
	return p
}

func (x DataKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataKind) Descriptor() protoreflect.EnumDescriptor {
	return file_callback_proto_enumTypes[0].Descriptor()
}

func (DataKind) Type() protoreflect.EnumType {
	return &file_callback_proto_enumTypes[0]
}

func (x DataKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataKind.Descriptor instead.
func (DataKind) EnumDescriptor() ([]byte, []int) {
	return file_callback_proto_rawDescGZIP(), []int{0}
}

// Callback binary stream
type CallbackData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Kind DataKind `protobuf:"varint,2,opt,name=kind,proto3,enum=callback.DataKind" json:"kind,omitempty"`
}

func (x *CallbackData) Reset() {
	*x = CallbackData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_callback_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallbackData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallbackData) ProtoMessage() {}

func (x *CallbackData) ProtoReflect() protoreflect.Message {
	mi := &file_callback_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallbackData.ProtoReflect.Descriptor instead.
func (*CallbackData) Descriptor() ([]byte, []int) {
	return file_callback_proto_rawDescGZIP(), []int{0}
}

func (x *CallbackData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CallbackData) GetKind() DataKind {
	if x != nil {
		return x.Kind
	}
	return DataKind_Data
}

var File_callback_proto protoreflect.FileDescriptor

var file_callback_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x4a, 0x0a, 0x0c, 0x43, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x26,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x69, 0x6e, 0x64,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x2a, 0x1f, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x10, 0x01, 0x32, 0x58, 0x0a, 0x0f, 0x43, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x16, 0x2e,
	0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x16, 0x2e, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x28, 0x01, 0x30,
	0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_callback_proto_rawDescOnce sync.Once
	file_callback_proto_rawDescData = file_callback_proto_rawDesc
)

func file_callback_proto_rawDescGZIP() []byte {
	file_callback_proto_rawDescOnce.Do(func() {
		file_callback_proto_rawDescData = protoimpl.X.CompressGZIP(file_callback_proto_rawDescData)
	})
	return file_callback_proto_rawDescData
}

var file_callback_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_callback_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_callback_proto_goTypes = []interface{}{
	(DataKind)(0),        // 0: callback.DataKind
	(*CallbackData)(nil), // 1: callback.CallbackData
}
var file_callback_proto_depIdxs = []int32{
	0, // 0: callback.CallbackData.kind:type_name -> callback.DataKind
	1, // 1: callback.CallbackService.HandleCallbacks:input_type -> callback.CallbackData
	1, // 2: callback.CallbackService.HandleCallbacks:output_type -> callback.CallbackData
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_callback_proto_init() }
func file_callback_proto_init() {
	if File_callback_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_callback_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallbackData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_callback_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_callback_proto_goTypes,
		DependencyIndexes: file_callback_proto_depIdxs,
		EnumInfos:         file_callback_proto_enumTypes,
		MessageInfos:      file_callback_proto_msgTypes,
	}.Build()
	File_callback_proto = out.File
	file_callback_proto_rawDesc = nil
	file_callback_proto_goTypes = nil
	file_callback_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CallbackServiceClient is the client API for CallbackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CallbackServiceClient interface {
	HandleCallbacks(ctx context.Context, opts ...grpc.CallOption) (CallbackService_HandleCallbacksClient, error)
}

type callbackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCallbackServiceClient(cc grpc.ClientConnInterface) CallbackServiceClient {
	return &callbackServiceClient{cc}
}

func (c *callbackServiceClient) HandleCallbacks(ctx context.Context, opts ...grpc.CallOption) (CallbackService_HandleCallbacksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CallbackService_serviceDesc.Streams[0], "/callback.CallbackService/HandleCallbacks", opts...)
	if err != nil {
		return nil, err
	}
	x := &callbackServiceHandleCallbacksClient{stream}
	return x, nil
}

type CallbackService_HandleCallbacksClient interface {
	Send(*CallbackData) error
	Recv() (*CallbackData, error)
	grpc.ClientStream
}

type callbackServiceHandleCallbacksClient struct {
	grpc.ClientStream
}

func (x *callbackServiceHandleCallbacksClient) Send(m *CallbackData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *callbackServiceHandleCallbacksClient) Recv() (*CallbackData, error) {
	m := new(CallbackData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CallbackServiceServer is the server API for CallbackService service.
type CallbackServiceServer interface {
	HandleCallbacks(CallbackService_HandleCallbacksServer) error
}

// UnimplementedCallbackServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCallbackServiceServer struct {
}

func (*UnimplementedCallbackServiceServer) HandleCallbacks(CallbackService_HandleCallbacksServer) error {
	return status.Errorf(codes.Unimplemented, "method HandleCallbacks not implemented")
}

func RegisterCallbackServiceServer(s *grpc.Server, srv CallbackServiceServer) {
	s.RegisterService(&_CallbackService_serviceDesc, srv)
}

func _CallbackService_HandleCallbacks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CallbackServiceServer).HandleCallbacks(&callbackServiceHandleCallbacksServer{stream})
}

type CallbackService_HandleCallbacksServer interface {
	Send(*CallbackData) error
	Recv() (*CallbackData, error)
	grpc.ServerStream
}

type callbackServiceHandleCallbacksServer struct {
	grpc.ServerStream
}

func (x *callbackServiceHandleCallbacksServer) Send(m *CallbackData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *callbackServiceHandleCallbacksServer) Recv() (*CallbackData, error) {
	m := new(CallbackData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CallbackService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "callback.CallbackService",
	HandlerType: (*CallbackServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HandleCallbacks",
			Handler:       _CallbackService_HandleCallbacks_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "callback.proto",
}
